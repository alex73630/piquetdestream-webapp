// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                  String  @id @default(cuid())
    userId              String
    type                String
    provider            String
    providerAccountId   String
    providerAccountName String?
    refresh_token       String?
    access_token        String?
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?
    session_state       String?
    user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    userState        UserState         @relation(fields: [userStateId], references: [id])
    streamRequests   StreamRequest[]
    availability     Availability[]
    techAppointments TechAppointment[]
    userStateId      String            @unique
    streamKey        StreamKey?
}

model UserState {
    id                  String   @id @default(cuid())
    userId              String   @unique
    roles               String[]
    completedObsSetup   Boolean?
    completedOnboarding Boolean?
    user                User?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StreamRequest {
    id                     Int                      @id @default(autoincrement())
    userId                 String
    title                  String
    category               String
    description            String?
    guests                 String[]
    streamer               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    streamRequestTimeSlots StreamRequestTimeSlots[]
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    techAppointmentId      Int?                     @unique
    techAppointment        TechAppointment?         @relation(fields: [techAppointmentId], references: [id], onDelete: Cascade)
}

model StreamRequestTimeSlots {
    id              Int                         @id @default(autoincrement())
    streamRequestId Int
    status          StreamRequestTimeslotStatus
    startTime       DateTime
    endTime         DateTime
    streamRequest   StreamRequest               @relation(fields: [streamRequestId], references: [id], onDelete: Cascade)
    createdAt       DateTime                    @default(now())
    updatedAt       DateTime                    @updatedAt
}

enum StreamRequestTimeslotStatus {
    PENDING
    APPROVED
    DENIED
}

model TechAppointment {
    id            Int                   @id @default(autoincrement())
    startTime     DateTime
    status        TechAppointmentStatus
    techId        String
    tech          User                  @relation(fields: [techId], references: [id], onDelete: Cascade)
    streamRequest StreamRequest?
}

enum TechAppointmentStatus {
    PENDING
    APPROVED
    DENIED
}

model Availability {
    id        Int              @id @default(autoincrement())
    userId    String
    startTime DateTime
    endTime   DateTime
    type      AvailabilityType
    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AvailabilityType {
    MODERATOR
    MEDIATION
    STREAMER
    TECH
}

model StreamKey {
    id        Int      @id @default(autoincrement())
    key       String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    streamer  User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}
